{
    "swagger": "2.0",
    "info": {
        "description": "This is an API to handle user comments on posts",
        "title": "Comments micro API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "dev@telar.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/red-gold/telar-web/blob/master/LICENSE"
        },
        "version": "1.0"
    },
    "host": "social.faas.telar.dev",
    "basePath": "/comments",
    "paths": {
        "/": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Fetches all comments linked to a given post, identified by its unique post ID. Supports pagination through the page parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by post ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier of the post whose comments are to be retrieved",
                        "name": "postId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all comments for the specified post.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Comment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request if the query parameters are invalid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found if no comments exist for the given post ID.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates the content of a specific comment based on its unique identifier. This operation allows for the modification of comment details by the commenter or authorized users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Update a comment",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body containing the updated comment details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CommentModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the comment profiles."
                    },
                    "400": {
                        "description": "Bad request if the request body or comment ID is invalid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user is not authenticated or lacks permission to update the comment.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found if the comment does not exist.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error if there's an issue updating the comment.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Adds a new comment to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Create a new comment",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The comment to add",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCommentModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created the comment and returns the object ID.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "objectId": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request if the comment data is invalid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user is not authenticated.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error for any other failures.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/id/{commentId}/post/{postId}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Deletes a comment based on its unique identifier and the post it belongs to. This operation allows for the removal of comments by the commenter or authorized users, ensuring the comment is accurately identified within the context of its post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Delete a comment from a post",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier of the comment to be deleted",
                        "name": "commentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier of the post associated with the comment to be deleted",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the comment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request if the comment ID or post ID is missing or not valid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user is not authenticated or lacks permission to delete the comment.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found if the comment or post does not exist.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error if there's an issue deleting the comment.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/post/{postId}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Deletes all comments associated with a given post ID. This operation is intended for removing all comments from a specific post, identified by its unique post ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Delete comments by post ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier of the post whose comments are to be deleted",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted all comments associated with the post ID."
                    },
                    "400": {
                        "description": "Bad request if the post ID is missing or not valid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error if there's an issue deleting the comments.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profile": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates the profile information (such as the user's name or avatar) in all comments made by a specific user. This operation is crucial for maintaining consistency in how user information appears across comments after a profile update.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Update comment profile",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the comment profiles."
                    },
                    "400": {
                        "description": "Bad request if the request body or user ID is invalid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user is not authenticated or lacks permission to update comment profiles.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found if the user does not exist.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error if there's an issue updating the comment profiles.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieves a list of comments based on provided query parameters such as postId, userId, etc. This operation allows for flexible querying to find comments relevant to specific criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Query comments",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional: The unique identifier of the post to filter comments by",
                        "name": "postId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional: The unique identifier of the user to filter comments by",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Optional: Number of comments to return per page",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Optional: Page number for pagination",
                        "name": "pageNumber",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of comments.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Comment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request if the query parameters are invalid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user is not authenticated.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error if there's an issue processing the query.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " message": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{commentId}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Fetches a specific comment based on its unique identifier. This operation is designed to provide detailed information about a single comment to the requester.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get a comment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd_token_here\u003e",
                        "description": "Authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier of the comment to be retrieved",
                        "name": "commentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the comment.",
                        "schema": {
                            "$ref": "#/definitions/models.CommentModel"
                        }
                    },
                    "400": {
                        "description": "Bad request if the comment ID is missing or not valid.",
                        "schema": {
                            "$ref": "#/definitions/utils.TelarError"
                        }
                    },
                    "404": {
                        "description": "Not found if the comment does not exist.",
                        "schema": {
                            "$ref": "#/definitions/utils.TelarError"
                        }
                    },
                    "500": {
                        "description": "Internal server error if there's an issue fetching the comment.",
                        "schema": {
                            "$ref": "#/definitions/utils.TelarError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Comment": {
            "type": "object",
            "properties": {
                "created_date": {
                    "type": "integer"
                },
                "deleted": {
                    "type": "boolean"
                },
                "deletedDate": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "integer"
                },
                "objectId": {
                    "type": "string"
                },
                "ownerAvatar": {
                    "type": "string"
                },
                "ownerDisplayName": {
                    "type": "string"
                },
                "ownerUserId": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "models.CommentModel": {
            "type": "object",
            "properties": {
                "created_date": {
                    "type": "integer"
                },
                "deleted": {
                    "type": "boolean"
                },
                "deletedDate": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "integer"
                },
                "objectId": {
                    "type": "string"
                },
                "ownerAvatar": {
                    "type": "string"
                },
                "ownerDisplayName": {
                    "type": "string"
                },
                "ownerUserId": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "models.CreateCommentModel": {
            "type": "object",
            "properties": {
                "created_date": {
                    "type": "integer"
                },
                "deleted": {
                    "type": "boolean"
                },
                "deletedDate": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "integer"
                },
                "objectId": {
                    "type": "string"
                },
                "ownerAvatar": {
                    "type": "string"
                },
                "ownerDisplayName": {
                    "type": "string"
                },
                "ownerUserId": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorCodeMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.TelarError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/utils.ErrorCodeMessage"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}